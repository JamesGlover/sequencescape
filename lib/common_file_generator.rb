# Common methods for robot file generators
module CommonFileGenerator
  # Returns a hash of barcodes to indexes used for ordering plates to beds for the worksheet
  def barcode_to_plate_index(plates)
    plates.each_with_object({}).with_index do |(plate, barcodes_to_indexes), index|
      barcodes_to_indexes[plate[0]] = index + 1
    end
  end

  #
  # Returns a hash of plates to indexes sorted by destination well to make sure
  # the plates are put the right way round for the robot
  #
  # @param [Hash] destinations The destination attribute of the data object generated by
  #                            {Batch::CommonRobotBehaviour.source_barcode_to_plate_index}
  # @yield [String] barcode The barcode of the plate to make a decision about. Return true from
  #                         the block to include the plate, false to filter it.
  # @return [Hash] Hash of plate barcodes mapped to their bed index
  #
  def filter_barcode_to_plate_index(destinations)
    destinations.each_with_object({}) do |(destination_barcode, destination_info), all_barcodes|
      mapping_sorted = sort_mapping_by_destination_well(destination_barcode, destination_info['mapping'])
      mapping_sorted.each do |map_well|
        barcode, _well = map_well['src_well']
        if block_given?
          next unless yield barcode
        end
        all_barcodes[barcode] ||= all_barcodes.length + 1
      end
    end
  end

  def sort_mapping_by_destination_well(plate_barcode, mapping)
    # query relevant 'map' records based on asset shape id & asset size, then sort by row order
    # return the original mapping if the Plate cannot be found using the barcode - for instance, if this is coming from stock_stamper.rb
    plate = Plate.find_by_barcode(plate_barcode)
    return mapping if plate.nil?

    relevant_map_records_by_description = plate.maps.index_by(&:description)

    mapping.sort_by do |a|
      map_record_description = a['dst_well']
      relevant_map_records_by_description[map_record_description].send(sort_order)
    end
  end

  def sort_order
    :row_order
  end
end
