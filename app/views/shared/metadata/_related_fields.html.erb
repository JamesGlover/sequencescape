
<script language="javascript">
  jQuery(function() {
    (function(undefined) {
      var hide = function(elements) {
        elements.each(function(index) {
          $(this).hide().find('input').attr('disabled','disabled');
        });
      };
      var show = function(elements) {
        elements.each(function(index) {
          $(this).show().find('input').attr('disabled',null);
        });
      };

      var valueFrom = function(element) {
        if (element === null) { return null }
        var value = element.value.toLowerCase().replace(/[^a-z0-9]+/, '_');
        return (value.length == 0) ? 'blank' : value;
      };

      var selectRelatedFor = function(id, value) {
        return jQuery('.related_to.' + id + '.' + value);
      };

      var processForOneDiv = function(divToProcess) {
        var fieldToCheckValueOfName;
        <% related.each do |field| %>
          if($(divToProcess).hasClass("<%= field.to_s %>")) {
            fieldToCheckValueOfName = "<%= field.to_s %>"
          }
        <% end %>

        var fieldToCheckValueOf = document.getElementById('<%= root %>_' + fieldToCheckValueOfName) ||
                $("input[name='study[study_metadata_attributes]["+fieldToCheckValueOfName+"]']:checked")[0] ||
                document.getElementById('<%= root %>_' + fieldToCheckValueOfName + '_id');

        var relatedToDivs = jQuery('.related_to.' + fieldToCheckValueOfName);
        hide(relatedToDivs);

        var valueFromElement = valueFrom(fieldToCheckValueOf);

        var relatedToDivsWithRelevantValue = selectRelatedFor(fieldToCheckValueOfName, valueFromElement);
        show(relatedToDivsWithRelevantValue);

        relatedToDivsWithRelevantValue.each(function(index2){
          processForOneDiv(this)
        });
      }

      observe = function(id) {

        var element = document.getElementById('<%= root %>_' + id) ||
                      $("input[name='study[study_metadata_attributes]["+id+"]']:checked")[0] ||
                      document.getElementById('<%= root %>_' + id + '_id');

        // Hide all of the DIVs and then show the current value.  We assume that the first identified element
        // is the one we're supposed to be using and that, if there are multiple fields, then they have the
        // same initial value.
        hide(jQuery('.related_to.' + id));

        var valueFromElement = valueFrom(element);
        show(selectRelatedFor(id, valueFromElement));

        // Now we can delegate handling of the click to the body element of the document.  This enables us to
        // handle multiple different fields with the same identifier as though they were one, hopefully.
        selector = '[id=<%= root %>_' + id + '],[id=<%= root %>_' + id + '_id],[name=\'study[study_metadata_attributes]['+id+']\']';

        jQuery('body').delegate(selector, 'change', function() {

          var relatedToDivs = jQuery('.related_to.' + id);
          var relatedToDivsWithRelevantValue = selectRelatedFor(id, valueFrom(this));

          hide(relatedToDivs);
          show(relatedToDivsWithRelevantValue);

          relatedToDivsWithRelevantValue.each(function(index){
            var div = this;
            var children = $(this).children('.related_to');
            children.each(function(index2){
              processForOneDiv(this)
            });
          });

        });
      };

    <% related.each do |field| %>
      observe("<%= field.to_s %>");
    <% end %>
    })();
  });

  (function($, undefined) {
  <% changing_fields.reverse.each do |field, options| %>
    attach_option_updater("<%= field.to_s %>", "<%= options[:when].to_s %>", {<%= options[:values].map { |k,v| "#{k.inspect}:#{v.inspect}" }.join(',').html_safe %>});
  <% end %>

    function attach_option_updater(target, source, values) {
      $('#<%= root %>_' + source).change(function() {
        select_to_change_options_in = $('#<%= root %>_' + target);
        selected_option = select_to_change_options_in.val();
        options = values[this.value].map(function(value) { return '<option value="' + value + '">' + value + '</option>'; });
        select_to_change_options_in.html(options.join('')).val(selected_option);
        select_to_change_options_in.trigger('change');
      }).trigger('change');
    };
  })(jQuery);
</script>
