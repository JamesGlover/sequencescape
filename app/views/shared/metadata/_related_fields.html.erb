
<script language="javascript">
  jQuery(function() {
    (function(undefined) {
      var hideAndDisableInputs = function(elements) {
        elements.each(function() {
          $(this).hide().find('input').attr('disabled','disabled');
        });
      };
      var showAndEnableInputs = function(elements) {
        elements.each(function() {
          $(this).show().find('input').attr('disabled',null);
        });
      };

      var valueFrom = function(element) {
        if (element === null) { return null }
        var value = element.value.toLowerCase().replace(/[^a-z0-9]+/, '_');
        return (value.length == 0) ? 'blank' : value;
      };

      var selectRelatedFor = function(fieldName, value) {
        return jQuery('.related_to.' + fieldName + '.' + value);
      };

      var selectRelatedForUnderElement = function(element, fieldName, value) {
        return jQuery(element).children('.related_to.' + fieldName + '.' + value);
      };

      var getElementByFieldName = function(fieldName) {
        return  document.getElementById('<%= root %>_' + fieldName) ||
                $("input[name='study[study_metadata_attributes]["+fieldName+"]']:checked")[0] ||
                document.getElementById('<%= root %>_' + fieldName + '_id');
      };

      var processForOneDiv = function(divToProcess) {

        hideAndDisableInputs($(divToProcess));

        var controllingFieldName;
        <% related.each do |field| %>
          if($(divToProcess).hasClass("<%= field.to_s %>")) {
            controllingFieldName = "<%= field.to_s %>"
          }
        <% end %>

        var controllingField = getElementByFieldName(controllingFieldName);
        valueFromControllingField = valueFrom(controllingField);

        var relatedToDivsWithRelevantValue = selectRelatedForUnderElement(divToProcess, controllingFieldName, valueFromControllingField);
        showAndEnableInputs(relatedToDivsWithRelevantValue);

        relatedToDivsWithRelevantValue.each(function(){
          processForOneDiv(this)
        });
      };

      hideAndShowFields = function(fieldName, controllingField) {
        var relatedToDivs = jQuery('.related_to.' + fieldName);
        hideAndDisableInputs(relatedToDivs);

        var relatedToDivsWithRelevantValue = selectRelatedFor(fieldName, valueFrom(controllingField));
        showAndEnableInputs(relatedToDivsWithRelevantValue);
        return relatedToDivsWithRelevantValue;
      };

      hideAndShowFieldsInitially = function(fieldName) {
        var controllingField = getElementByFieldName(fieldName);
        hideAndShowFields(fieldName, controllingField);
      };

      addOnChangeHandler = function(fieldName) {
        controllingFieldSelector = '[id=<%= root %>_' + fieldName + '],[id=<%= root %>_' + fieldName + '_id],[name=\'study[study_metadata_attributes]['+fieldName+']\']';

        jQuery('body').delegate(controllingFieldSelector, 'change', function() {
          controllingField = this;
          relatedToDivsWithRelevantValue = hideAndShowFields(fieldName, controllingField);

          relatedToDivsWithRelevantValue.each(function(){
            var children = $(this).children('.related_to');
            children.each(function(){
              processForOneDiv(this);
            });
          });
        });
      }

      initialize = function() {
        <% related.each do |field| %>
          var fieldName = "<%= field.to_s %>";
          hideAndShowFieldsInitially(fieldName);
          addOnChangeHandler(fieldName);
        <% end %>
      }

      initialize();
    })();
  });

  (function($, undefined) {
    <% changing_fields.reverse.each do |field, options| %>
      attach_option_updater("<%= field.to_s %>", "<%= options[:when].to_s %>", {<%= options[:values].map { |k,v| "#{k.inspect}:#{v.inspect}" }.join(',').html_safe %>});
    <% end %>

    function attach_option_updater(target, source, values) {
      $('#<%= root %>_' + source).change(function() {
        select_to_change_options_in = $('#<%= root %>_' + target);
        selected_option = select_to_change_options_in.val();
        options = values[this.value].map(function(value) { return '<option value="' + value + '">' + value + '</option>'; });
        select_to_change_options_in.html(options.join('')).val(selected_option);
        select_to_change_options_in.trigger('change');
      }).trigger('change');
    };
  })(jQuery);
</script>
